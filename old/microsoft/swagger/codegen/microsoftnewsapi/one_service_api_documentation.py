# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError
from . import models


class OneServiceAPIDocumentationConfiguration(Configuration):
    """Configuration for OneServiceAPIDocumentation
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        if not base_url:
            base_url = 'https://api.msn.com'

        super(OneServiceAPIDocumentationConfiguration, self).__init__(base_url)

        self.add_user_agent('oneserviceapidocumentation/{}'.format(VERSION))


class OneServiceAPIDocumentation(object):
    """&lt;div&gt;
        &lt;h2&gt;Summary&lt;/h2&gt;
        &lt;p class='text-justify lead'&gt;
    		We are providing public Microsoft News API end points.
    		Clients can use these endpoints with apikey parameter to distinguish their applications, and use optional activityId
            to track their usage performance.&lt;/p&gt;
    &lt;/div&gt;
    &lt;details&gt;
        &lt;summary&gt;
            &lt;b&gt;Overview&lt;/b&gt;
        &lt;/summary&gt;
        &lt;div id='tab_Overview'&gt;
            &lt;h3&gt;Common Parameters applicable for all endpoints&lt;/h3&gt;
            &lt;table&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;th style='width:100px;'&gt;Parameter&lt;/th&gt;
                        &lt;th style='width:120px;'&gt;Default&lt;/th&gt;
                        &lt;th style='width:300px;'&gt;Example&lt;/th&gt;
                        &lt;th&gt;Required&lt;/th&gt;
                        &lt;th&gt;Description&lt;/th&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;strong&gt;&lt;code&gt;apikey&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
                        &lt;td style='max-width: 150px;word-wrap: break-word;'&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;XX0C1SCbLazitWpgBadtQfOX3Vn51YTN8NZEM0RkTe&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;Yes&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;Client Identifier&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;strong&gt;&lt;code&gt;ocid&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
                        &lt;td style='max-width: 150px;word-wrap: break-word;'&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;AbC123&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;Application Identifier&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;strong&gt;&lt;code&gt;activityId&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
                        &lt;td style='max-width: 150px;word-wrap: break-word;'&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;0ac38555-4037-4ede-be41-10674c46b01c&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;Use this parameter for if you need to relate your request activities with Microsoft News API performance
                            monitoring&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;strong&gt;&lt;code&gt;$top&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
                        &lt;td style='max-width: 150px;word-wrap: break-word;'&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;50&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;Total number of documents required - (default is 10)&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;strong&gt;&lt;code&gt;$select&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
                        &lt;td style='max-width: 150px;word-wrap: break-word;'&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;id,name&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;Comma separated fields, for attribute projection purpose&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;strong&gt;&lt;code&gt;ids&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
                        &lt;td style='max-width: 150px;word-wrap: break-word;'&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;id1,id2&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;Get related entities via their ids.&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;strong&gt;&lt;code&gt;$skip&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
                        &lt;td style='max-width: 150px;word-wrap: break-word;'&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;No&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;Number of documents to be skipped from the top.&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;&lt;strong&gt;&lt;code&gt;Accept-Encoding&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt;
                        &lt;td style='max-width: 150px;word-wrap: break-word;'&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;code&gt;Yes&lt;/code&gt;&lt;/td&gt;
                        &lt;td&gt;&lt;strong&gt;Specify this parameter via header&lt;/strong&gt;&lt;br&gt;Use gzip to enable compression.&lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
            &lt;h3&gt;Common Error Codes&lt;/h3&gt;
            &lt;table&gt;
                &lt;tbody&gt;
                    &lt;tr&gt;
                        &lt;th style='width:100px;'&gt;Code&lt;/th&gt;
                        &lt;th style='width:120px;'&gt;Name&lt;/th&gt;
                        &lt;th style='width:300px;'&gt;What To Do&lt;/th&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;400&lt;/td&gt;
                        &lt;td&gt;Bad Request&lt;/td&gt;
                        &lt;td&gt;The request could not be understood by the server due to malformed syntax. The client SHOULD NOT
                            repeat the request without modifications.&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;408&lt;/td&gt;
                        &lt;td&gt;Request Timeout&lt;/td&gt;
                        &lt;td&gt;The client did not produce a request within the time that the server was prepared to wait. The
                            client MAY repeat the request without modifications at any later time.&lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;500&lt;/td&gt;
                        &lt;td&gt;Internal Server Error&lt;/td&gt;
                        &lt;td&gt;The server encountered an unexpected condition which prevented it from fulfilling the request.
                        &lt;/td&gt;
                    &lt;/tr&gt;
                    &lt;tr&gt;
                        &lt;td&gt;503&lt;/td&gt;
                        &lt;td&gt;Service Unavailable&lt;/td&gt;
                        &lt;td&gt;The server is currently unable to handle the request due to a temporary overloading or
                            maintenance of the server. The implication is that this is a temporary condition which will be
                            alleviated after some delay.&lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
        &lt;/div&gt;
    &lt;/details&gt;

    :ivar config: Configuration for client.
    :vartype config: OneServiceAPIDocumentationConfiguration

    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None):

        self.config = OneServiceAPIDocumentationConfiguration(base_url)
        self._client = ServiceClient(None, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '1'
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)


    def get_news_topics(
            self, market=None, user=None, activity_id=None, top=None, select=None, ids=None, skip=None, custom_headers=None, raw=False, **operation_config):
        """Get available interests.

        :param market: The market.
        :type market: str
        :param user: The user ID of who is making the request, needs to be
         authenticated.
        :type user: str
        :param activity_id: Use this parameter for if you need to relate your
         request activities with Microsoft News API performance monitoring
        :type activity_id: str
        :param top: Total number of documents required - (default is 10)
        :type top: int
        :param select: Comma separated fields, for attribute projection
         purpose
        :type select: str
        :param ids: Get related entities via their ids.
        :type ids: str
        :param skip: Number of documents to be skipped from the top.
        :type skip: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_news_topics.metadata['url']

        # Construct parameters
        query_parameters = {}
        if market is not None:
            query_parameters['market'] = self._serialize.query("market", market, 'str')
        if user is not None:
            query_parameters['user'] = self._serialize.query("user", user, 'str')
        if activity_id is not None:
            query_parameters['activityId'] = self._serialize.query("activity_id", activity_id, 'str')
        if top is not None:
            query_parameters['$top'] = self._serialize.query("top", top, 'int')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, 'str')
        if ids is not None:
            query_parameters['ids'] = self._serialize.query("ids", ids, 'str')
        if skip is not None:
            query_parameters['$skip'] = self._serialize.query("skip", skip, 'int')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 400, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('MsnOneWebServiceSwaggerODataResponseMsnTagsDataModelTagEntityLibCompositeCard', response)
        if response.status_code == 400:
            deserialized = self._deserialize('MsnOneWebServiceSwaggerODataErrorResponse', response)
        if response.status_code == 500:
            deserialized = self._deserialize('MsnOneWebServiceSwaggerODataErrorResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_news_topics.metadata = {'url': '/news/topics'}

    def get_news_feed(
            self, query=None, next_page_count=None, market=None, user=None, filter=None, activity_id=None, top=None, select=None, ids=None, skip=None, custom_headers=None, raw=False, **operation_config):
        """The Feed API is a one stop shop for getting content for any category
        (ie. autos, sports), search term (ie. Microsoft), or theme (trending
        feed, related feed).

        :param query: Comma separated value for an MSN category, entity, or
         any freeform search term for which a feed is desired.
        :type query: str
        :param next_page_count: Indicates the desired number of documents for
         the next page - Defaults to $top value, or 10 if $top is not
         specified.
        :type next_page_count: int
        :param market: The market.
        :type market: str
        :param user: The user ID of who is making the request, needs to be
         authenticated.
        :type user: str
        :param filter: ODATA-formatted filter that applies to artifacts. This
         supports filtering on the following artifact properties:
         Provider/Id: can filter out specific providers.
         Type: can filter out specific content types.
        :type filter: str
        :param activity_id: Use this parameter for if you need to relate your
         request activities with Microsoft News API performance monitoring
        :type activity_id: str
        :param top: Total number of documents required - (default is 10)
        :type top: int
        :param select: Comma separated fields, for attribute projection
         purpose
        :type select: str
        :param ids: Get related entities via their ids.
        :type ids: str
        :param skip: Number of documents to be skipped from the top.
        :type skip: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_news_feed.metadata['url']

        # Construct parameters
        query_parameters = {}
        if query is not None:
            query_parameters['query'] = self._serialize.query("query", query, 'str')
        if next_page_count is not None:
            query_parameters['nextPageCount'] = self._serialize.query("next_page_count", next_page_count, 'int')
        if market is not None:
            query_parameters['market'] = self._serialize.query("market", market, 'str')
        if user is not None:
            query_parameters['user'] = self._serialize.query("user", user, 'str')
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
        if activity_id is not None:
            query_parameters['activityId'] = self._serialize.query("activity_id", activity_id, 'str')
        if top is not None:
            query_parameters['$top'] = self._serialize.query("top", top, 'int')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, 'str')
        if ids is not None:
            query_parameters['ids'] = self._serialize.query("ids", ids, 'str')
        if skip is not None:
            query_parameters['$skip'] = self._serialize.query("skip", skip, 'int')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 400, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('MsnOneWebServiceSwaggerODataResponseMicrosoftNewsApiContractsFeedItemViewV1', response)
        if response.status_code == 400:
            deserialized = self._deserialize('MsnOneWebServiceSwaggerODataErrorResponse', response)
        if response.status_code == 500:
            deserialized = self._deserialize('MsnOneWebServiceSwaggerODataErrorResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_news_feed.metadata = {'url': '/news/feed'}

    def get_news_markets(
            self, filter=None, activity_id=None, top=None, select=None, ids=None, skip=None, custom_headers=None, raw=False, **operation_config):
        """Read Market objects. Queryable across markets.

        :param filter: OData filter.
        :type filter: str
        :param activity_id: Use this parameter for if you need to relate your
         request activities with Microsoft News API performance monitoring
        :type activity_id: str
        :param top: Total number of documents required - (default is 10)
        :type top: int
        :param select: Comma separated fields, for attribute projection
         purpose
        :type select: str
        :param ids: Get related entities via their ids.
        :type ids: str
        :param skip: Number of documents to be skipped from the top.
        :type skip: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_news_markets.metadata['url']

        # Construct parameters
        query_parameters = {}
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
        if activity_id is not None:
            query_parameters['activityId'] = self._serialize.query("activity_id", activity_id, 'str')
        if top is not None:
            query_parameters['$top'] = self._serialize.query("top", top, 'int')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, 'str')
        if ids is not None:
            query_parameters['ids'] = self._serialize.query("ids", ids, 'str')
        if skip is not None:
            query_parameters['$skip'] = self._serialize.query("skip", skip, 'int')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 400, 500]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('MsnOneWebServiceSwaggerODataResponseMsnTagsDataModelTagEntityLibMarket', response)
        if response.status_code == 400:
            deserialized = self._deserialize('MsnOneWebServiceSwaggerODataErrorResponse', response)
        if response.status_code == 500:
            deserialized = self._deserialize('MsnOneWebServiceSwaggerODataErrorResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_news_markets.metadata = {'url': '/news/markets'}
