# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class MsnTagsDataModelTagEntityLibArtifact(Model):
    """MsnTagsDataModelTagEntityLibArtifact.

    :param source: Get or set the Source of the Artifact
    :type source: str
    :param source_id: Get or set the SourceId of the Artifact
    :type source_id: str
    :param cms_id: Gets the CmsId of the Artifact.
    :type cms_id: str
    :param published_date_time: Get or set the PublishDate of the entity
    :type published_date_time: str
    :param provider:
    :type provider:
     ~microsoft.swagger.codegen.microsoftnewsapi.models.MsnTagsDataModelTagEntityLibArtifactDataProviderSummary
    :param images: Gets or sets Images.
    :type images:
     list[~microsoft.swagger.codegen.microsoftnewsapi.models.MsnTagsDataModelTagEntityLibArtifactDataImage]
    :param abstract: Gets or sets Abstract.
    :type abstract: str
    :param headlines: Gets or sets Headlines.
    :type headlines:
     list[~microsoft.swagger.codegen.microsoftnewsapi.models.MsnTagsDataModelTagEntityLibArtifactDataHeadline]
    :param tag_evaluation_groups: Gets or sets TagEvaluationGroups.
    :type tag_evaluation_groups:
     list[~microsoft.swagger.codegen.microsoftnewsapi.models.MsnTagsDataModelTagEntityLibArtifactDataTagEvaluationGroup]
    :param tags: Gets or sets Tags.
    :type tags:
     list[~microsoft.swagger.codegen.microsoftnewsapi.models.MsnTagsDataModelTagEntityLibArtifactDataTag]
    :param categories: Gets or sets Categories.
    :type categories:
     list[~microsoft.swagger.codegen.microsoftnewsapi.models.MsnTagsDataModelTagEntityLibArtifactDataCategory]
    :param external_video_files: Gets or sets ExternalVideoFiles.
    :type external_video_files:
     list[~microsoft.swagger.codegen.microsoftnewsapi.models.MsnTagsDataModelTagEntityLibArtifactDataExternalVideoFile]
    :param video_metadata:
    :type video_metadata:
     ~microsoft.swagger.codegen.microsoftnewsapi.models.MsnTagsDataModelTagEntityLibArtifactDataVideoMetadata
    :param has_syndication_rights: Gets or sets HasSyndicationRights.
    :type has_syndication_rights: bool
    :param is_breaking: Gets or sets IsBreaking.
    :type is_breaking: bool
    :param gallery_item_count: Gets or sets the gallery item count.
    :type gallery_item_count: int
    :param is_embed_only: Gets or sets a value indicating whether the content
     document should be treated as an embed only.
     By default content is considered as standalone content (isEmbedOnly is
     false).
    :type is_embed_only: bool
    :param title: Get or set the EntityName of the Actionable
    :type title: str
    :param type: Get or set the Type of the Card.
     Please use ContentTypes for this property although we don't use a strong
     name for easier backward compatibilty for future extension.
    :type type: str
    :param url: Get or set the Clickable Url of the Card
    :type url: str
    :param locale: Gets or sets Locale of the Card (optional) for extra
     information purpose.
    :type locale: str
    :param created_by: Get or set the CreatedBy of the entity
    :type created_by: str
    :param created_date_time: Get or set the CreateDate of the entity
    :type created_date_time: str
    :param updated_date_time: Get or set the ModifiedDate of the entity
    :type updated_date_time: str
    :param deleted: Get or set whether the entity is Deleted
    :type deleted: bool
    :param _et: Get or set the extended type
    :type _et: str
    :param id:
    :type id: str
    :param _t:
    :type _t: str
    """

    _attribute_map = {
        'source': {'key': 'source', 'type': 'str'},
        'source_id': {'key': 'sourceId', 'type': 'str'},
        'cms_id': {'key': 'cmsId', 'type': 'str'},
        'published_date_time': {'key': 'publishedDateTime', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'MsnTagsDataModelTagEntityLibArtifactDataProviderSummary'},
        'images': {'key': 'images', 'type': '[MsnTagsDataModelTagEntityLibArtifactDataImage]'},
        'abstract': {'key': 'abstract', 'type': 'str'},
        'headlines': {'key': 'headlines', 'type': '[MsnTagsDataModelTagEntityLibArtifactDataHeadline]'},
        'tag_evaluation_groups': {'key': 'tagEvaluationGroups', 'type': '[MsnTagsDataModelTagEntityLibArtifactDataTagEvaluationGroup]'},
        'tags': {'key': 'tags', 'type': '[MsnTagsDataModelTagEntityLibArtifactDataTag]'},
        'categories': {'key': 'categories', 'type': '[MsnTagsDataModelTagEntityLibArtifactDataCategory]'},
        'external_video_files': {'key': 'externalVideoFiles', 'type': '[MsnTagsDataModelTagEntityLibArtifactDataExternalVideoFile]'},
        'video_metadata': {'key': 'videoMetadata', 'type': 'MsnTagsDataModelTagEntityLibArtifactDataVideoMetadata'},
        'has_syndication_rights': {'key': 'hasSyndicationRights', 'type': 'bool'},
        'is_breaking': {'key': 'isBreaking', 'type': 'bool'},
        'gallery_item_count': {'key': 'galleryItemCount', 'type': 'int'},
        'is_embed_only': {'key': 'isEmbedOnly', 'type': 'bool'},
        'title': {'key': 'title', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'locale': {'key': 'locale', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'str'},
        'updated_date_time': {'key': 'updatedDateTime', 'type': 'str'},
        'deleted': {'key': 'deleted', 'type': 'bool'},
        '_et': {'key': '_et', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        '_t': {'key': '_t', 'type': 'str'},
    }

    def __init__(self, source=None, source_id=None, cms_id=None, published_date_time=None, provider=None, images=None, abstract=None, headlines=None, tag_evaluation_groups=None, tags=None, categories=None, external_video_files=None, video_metadata=None, has_syndication_rights=None, is_breaking=None, gallery_item_count=None, is_embed_only=None, title=None, type=None, url=None, locale=None, created_by=None, created_date_time=None, updated_date_time=None, deleted=None, _et=None, id=None, _t=None):
        super(MsnTagsDataModelTagEntityLibArtifact, self).__init__()
        self.source = source
        self.source_id = source_id
        self.cms_id = cms_id
        self.published_date_time = published_date_time
        self.provider = provider
        self.images = images
        self.abstract = abstract
        self.headlines = headlines
        self.tag_evaluation_groups = tag_evaluation_groups
        self.tags = tags
        self.categories = categories
        self.external_video_files = external_video_files
        self.video_metadata = video_metadata
        self.has_syndication_rights = has_syndication_rights
        self.is_breaking = is_breaking
        self.gallery_item_count = gallery_item_count
        self.is_embed_only = is_embed_only
        self.title = title
        self.type = type
        self.url = url
        self.locale = locale
        self.created_by = created_by
        self.created_date_time = created_date_time
        self.updated_date_time = updated_date_time
        self.deleted = deleted
        self._et = _et
        self.id = id
        self._t = _t
